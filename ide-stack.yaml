Parameters:
  LambdaRuntime:
    Type: String
    Default: python3.13
    AllowedValues:
      - python3.12
      - python3.13
    Description: The runtime version for Lambda functions

  SsmLatestAmiParameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

Resources:
  IdeVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ide-vpc

  IdeVpcPublicSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ide-stack/IdeVpc/Vpc/PublicSubnet1
      VpcId:
        Ref: IdeVpc

  IdeVpcPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ide-stack/IdeVpc/Vpc/PublicSubnet1
      VpcId:
        Ref: IdeVpc

  IdeVpcPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: IdeVpcPublicSubnet1RouteTable
      SubnetId:
        Ref: IdeVpcPublicSubnet1Subnet

  IdeVpcPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IdeVpcIGW
      RouteTableId:
        Ref: IdeVpcPublicSubnet1RouteTable

  IdeVpcPublicSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ide-stack/IdeVpc/Vpc/PublicSubnet2
      VpcId:
        Ref: IdeVpc

  IdeVpcPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: ide-stack/IdeVpc/Vpc/PublicSubnet2
      VpcId:
        Ref: IdeVpc

  IdeVpcPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: IdeVpcPublicSubnet2RouteTable
      SubnetId:
        Ref: IdeVpcPublicSubnet2Subnet

  IdeVpcPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IdeVpcIGW
      RouteTableId:
        Ref: IdeVpcPublicSubnet2RouteTable

  IdeVpcIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ide-vpc

  IdeVpcVPCGWC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: IdeVpcIGW
      VpcId:
        Ref: IdeVpc

  VSCodeIdeEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VSCodeIdeEc2Role
      Description: Role for VSCode IDE
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AdministratorAccess
        - Ref: IdeDenyLargeResourcesPolicy

  IdeDenyLargeResourcesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ""
      ManagedPolicyName: IdeDenyLargeResourcesPolicy
      Path: /
      PolicyDocument:
        Statement:
          - Action: ec2:RunInstances
            Condition:
              StringLike:
                ec2:InstanceType:
                  - "*2xlarge"
                  - "*4xlarge"
                  - "*6xlarge"
                  - "*8xlarge"
                  - "*9xlarge"
                  - "*10xlarge"
                  - "*12xlarge"
                  - "*16xlarge"
                  - "*18xlarge"
                  - "*24xlarge"
                  - f1*
                  - x1*
                  - z1*
                  - "*metal"
            Effect: Deny
            Resource: arn:aws:ec2:*:*:instance/*
            Sid: DenyXXLInstances
          - Action:
              - ec2:ModifyReservedInstances
              - ec2:PurchaseHostReservation
              - ec2:PurchaseReservedInstancesOffering
              - ec2:PurchaseScheduledInstances
              - rds:PurchaseReservedDBInstancesOffering
              - dynamodb:PurchaseReservedCapacityOfferings
            Effect: Deny
            Resource: "*"
            Sid: DenyReservations
        Version: "2012-10-17"

  VSCodeIdePrefixListFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VSCodeIdePrefixListFunctionServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  VSCodeIdePrefixListFunctionServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ec2:DescribeManagedPrefixLists
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: VSCodeIdePrefixListFunctionServiceRoleDefaultPolicy
      Roles:
        - Ref: VSCodeIdePrefixListFunctionServiceRole

  VSCodeIdePrefixListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}-prefix-list-function"
      RetentionInDays: 1
    DeletionPolicy: Delete

  VSCodeIdePrefixListFunction:
    Type: AWS::Lambda::Function
    DependsOn: VSCodeIdePrefixListFunctionLogGroup
    Properties:
      FunctionName: !Sub "${AWS::StackName}-prefix-list-function"
      LoggingConfig:
        LogGroup: !Ref VSCodeIdePrefixListFunctionLogGroup
      Handler: index.lambda_handler
      Role: !GetAtt VSCodeIdePrefixListFunctionServiceRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 180
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      res = ec2.describe_managed_prefix_lists(
                         Filters=[{
                            'Name': 'prefix-list-name',
                            'Values': ['com.amazonaws.global.cloudfront.origin-facing']
                         }]
                      )

                      responseData = {'PrefixListId': str(res['PrefixLists'][0]['PrefixListId'])}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  VSCodeIdePrefixListResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt VSCodeIdePrefixListFunction.Arn


  VSCodeIdeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE security group
      GroupName: ide-cloudfront-ide-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.202.216.48/29
          Description: Allow Instance Connect (eu-west-1)
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: IdeVpc


  VSCodeIdeAllowAllSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE allow all trafic security group FiiPactic, should be disabled
      GroupName: ide-allow-all-sg
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: Allow all inbound traffic by default
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: IdeVpc

  VSCodeIdeSecurityGroupfromIndirectPeer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: HTTP from CloudFront only
      FromPort: 80
      GroupId: !GetAtt VSCodeIdeSecurityGroup.GroupId
      IpProtocol: tcp
      SourcePrefixListId: !GetAtt VSCodeIdePrefixListResource.PrefixListId
      ToPort: 80

  VSCodeIdeAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App security group
      GroupName: ide-cloudfront-app-sg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: 8080 from any
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId:
        Ref: IdeVpc

  VSCodeIdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Ref: VSCodeIdeEc2Role
      Roles:
        - Ref: VSCodeIdeEc2Role

  VSCodeIdeEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 50
            VolumeType: gp3
      IamInstanceProfile: !Ref VSCodeIdeInstanceProfile
      ImageId: !Ref SsmLatestAmiParameter
      InstanceType: t3.medium
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref IdeVpcPublicSubnet1Subnet
          GroupSet:
            - !GetAtt VSCodeIdeAllowAllSecurityGroup.GroupId
            - !GetAtt VSCodeIdeSecurityGroup.GroupId
            - !GetAtt VSCodeIdeInternalSecurityGroup.GroupId
            - !GetAtt VSCodeIdeAppSecurityGroup.GroupId
          AssociatePublicIpAddress: true
      Tags:
        - Key: Name
          Value: IDE
      UserData: !Base64 '#!/bin/bash'
      EbsOptimized: true
    DependsOn:
      - VSCodeIdePasswordSecret

  VSCodeIdeInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDE internal security group
      GroupName: ide-internal-sg
      VpcId:
        Ref: IdeVpc

  VSCodeIdeInternalSecurityGroupfromidestackVSCodeIdeInternalSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all internal traffic
      GroupId: !GetAtt VSCodeIdeInternalSecurityGroup.GroupId
      IpProtocol: "-1"
      SourceSecurityGroupId: !GetAtt VSCodeIdeInternalSecurityGroup.GroupId

  VSCodeIdeInternalSecurityGrouptoidestackVSCodeIdeInternalSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow all internal traffic
      DestinationSecurityGroupId: !GetAtt VSCodeIdeInternalSecurityGroup.GroupId
      GroupId: !GetAtt VSCodeIdeInternalSecurityGroup.GroupId
      IpProtocol: "-1"

  VSCodeIdeBootstrapWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  VSCodeIdeBootstrapWaitConditionEDA1E0E7:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: VSCodeIdeBootstrapWaitConditionHandle
      Timeout: "900"
    DependsOn:
      - VSCodeIdeBootstrapDocument
      - VSCodeIdeEC2Instance


  VSCodeIdeDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          Compress: true
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: idestackVSCodeIdeDistributionOrigin
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !GetAtt VSCodeIdeEC2Instance.PublicDnsName
            Id: idestackVSCodeIdeDistributionOrigin

  VSCodeIdePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludeCharacters: '"@/\\'
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
      Name: ide-password-lambda

  VSCodeIdePasswordExporterFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VSCodeIdePasswordExporterFunctionServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  VSCodeIdePasswordExporterFunctionServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: VSCodeIdePasswordSecret
        Version: "2012-10-17"
      PolicyName: VSCodeIdePasswordExporterFunctionServiceRolePolicy
      Roles:
        - Ref: VSCodeIdePasswordExporterFunctionServiceRole

  VSCodeIdePasswordExporterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}-password-exporter-function"
      RetentionInDays: 1
    DeletionPolicy: Delete

  VSCodeIdePasswordExporterFunction:
    Type: AWS::Lambda::Function
    DependsOn: VSCodeIdePasswordExporterFunctionLogGroup
    Properties:
      FunctionName: !Sub "${AWS::StackName}-password-exporter-function"
      LoggingConfig:
        LogGroup: !Ref VSCodeIdePasswordExporterFunctionLogGroup
      Handler: index.lambda_handler
      Role: !GetAtt VSCodeIdePasswordExporterFunctionServiceRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 180
      Code:
        ZipFile: |-
          import traceback
          import cfnresponse
          import boto3
          import json

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      passwordName = event['ResourceProperties']['PasswordName']

                      secretsmanager = boto3.client('secretsmanager')

                      response = secretsmanager.get_secret_value(
                          SecretId=passwordName,
                      )

                      responseData = json.loads(response['SecretString'])
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  VSCodeIdePasswordExporter:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt VSCodeIdePasswordExporterFunction.Arn
      PasswordName: !Join
        - "-"
        - - !Select [0, !Split ["-", !Select [6, !Split [":", !Ref VSCodeIdePasswordSecret]]]]
          - !Select [1, !Split ["-", !Select [6, !Split [":", !Ref VSCodeIdePasswordSecret]]]]
          - !Select [2, !Split ["-", !Select [6, !Split [":", !Ref VSCodeIdePasswordSecret]]]]

  VSCodeIdeBootstrapDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentFormat: YAML
      DocumentType: Command
      Name: ide-bootstrap-document
      UpdateMethod: NewVersion
      Content:
        schemaVersion: "2.2"
        description: Bootstrap IDE
        parameters:
          BootstrapScript:
            type: String
            default: ""
            description: (Optional) Custom bootstrap script to run.
        mainSteps:
          - inputs:
              runCommand:
                - Fn::Sub:
                    - |-
                      bash << 'HEREDOC'
                      set -e

                      echo "Retrieving IDE password..."

                      PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${passwordName}" --query 'SecretString' --output text)

                      export IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')

                      echo "Setting profile variables..."

                      # Set some useful variables
                      export TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                      export AWS_REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $4}')
                      export EC2_PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
                      export EC2_DOMAIN=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/public-hostname)
                      export EC2_URL="http://$EC2_DOMAIN"

                      if [ -z "${domain}" ]; then
                        export IDE_DOMAIN=$(aws cloudfront list-distributions --query 'DistributionList.Items[0].DomainName' --output text)
                      else
                        export IDE_DOMAIN="${domain}"
                      fi

                      tee /etc/profile.d/workshop.sh <<EOF
                      export INSTANCE_IAM_ROLE_NAME="${instanceIamRoleName}"
                      export INSTANCE_IAM_ROLE_ARN="${instanceIamRoleArn}"

                      export AWS_REGION="$AWS_REGION"
                      export AWS_DEFAULT_REGION="$AWS_REGION"
                      export EC2_PRIVATE_IP="$EC2_PRIVATE_IP"
                      export EC2_DOMAIN="$EC2_DOMAIN"
                      export EC2_URL="$EC2_URL"

                      export IDE_DOMAIN="$IDE_DOMAIN"
                      export IDE_URL="https://$IDE_DOMAIN"
                      export IDE_PASSWORD="$IDE_PASSWORD"

                      alias code="code-server"
                      EOF

                      source /etc/profile.d/workshop.sh

                      echo "Setting PS1..."

                      # Set PS1
                      tee /etc/profile.d/custom_prompt.sh <<EOF
                      #!/bin/sh

                      export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                      EOF

                      echo "Generating SSH key..."

                      # Generate an SSH key for ec2-user
                      sudo -u ec2-user bash -c "ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -m pem <<< y"

                      echo "Installing AWS CLI..."

                      # Install AWS CLI
                      curl -LSsf -o /tmp/aws-cli.zip https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip
                      unzip -q -d /tmp /tmp/aws-cli.zip
                      /tmp/aws/install --update
                      rm -rf /tmp/aws*

                      echo "export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)" | sudo tee -a /etc/profile.d/workshop.sh
                      source /etc/profile.d/workshop.sh

                      echo "Installing Docker..."

                      # Install docker and base package
                      dnf install -y -q docker git >/dev/null
                      service docker start
                      usermod -aG docker ec2-user

                      echo "Installing code-server..."

                      # Install code-server
                      codeServer=$(dnf list installed code-server | wc -l)
                      if [ "$codeServer" -eq "0" ]; then
                        sudo -u ec2-user "codeServerVersion=${codeServerVersion}" bash -c 'curl -fsSL https://code-server.dev/install.sh | sh -s -- --version ${codeServerVersion}'
                        systemctl enable --now code-server@ec2-user
                      fi

                      sudo -u ec2-user bash -c 'mkdir -p ~/.config/code-server'
                      sudo -u ec2-user bash -c 'touch ~/.config/code-server/config.yaml'
                      tee /home/ec2-user/.config/code-server/config.yaml <<EOF
                      cert: false
                      auth: password
                      password: "$IDE_PASSWORD"
                      bind-addr: 127.0.0.1:8889
                      EOF

                      # Create default directory for workspace
                      sudo -u ec2-user bash -c 'mkdir -p ~/environment'

                      ENVIRONMENT_CONTENTS_ZIP=${environmentContentsZip}

                      if [ ! -z "$ENVIRONMENT_CONTENTS_ZIP" ]; then
                        echo "Adding environments archive..."

                        if [[ $ENVIRONMENT_CONTENTS_ZIP == s3:* ]]; then
                          aws s3 cp $ENVIRONMENT_CONTENTS_ZIP /tmp/environment.zip
                        else
                          curl -LSsf -o /tmp/environment.zip $ENVIRONMENT_CONTENTS_ZIP
                        fi

                        sudo -u ec2-user bash -c 'unzip -q /tmp/environment.zip -d ~/environment'

                        rm -rf /tmp/environment.zip
                      fi

                      STARTUP_EDITOR='none'

                      TERMINAL_ON_STARTUP="${terminalOnStartup}"
                      README_URL="${readmeUrl}"

                      if [ ! -z "$README_URL" ]; then
                        echo "Adding README..."
                        if [[ $README_URL == s3:* ]]; then
                          aws s3 cp $README_URL /home/ec2-user/environment/README.md
                        else
                          curl -LSsf -o /home/ec2-user/environment/README.md $README_URL
                        fi
                      fi

                      if [ "$TERMINAL_ON_STARTUP" = "true" ]; then
                        STARTUP_EDITOR='terminal'
                      elif [ -f /home/ec2-user/environment/README.md ]; then
                        STARTUP_EDITOR='readme'
                      fi

                      echo "Configuring code-server..."

                      sudo -u ec2-user bash -c 'mkdir -p ~/.local/share/code-server/User'
                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/settings.json'
                      tee /home/ec2-user/.local/share/code-server/User/settings.json <<EOF
                      {
                        "extensions.autoUpdate": false,
                        "extensions.autoCheckUpdates": false,
                        "security.workspace.trust.enabled": false,
                        "workbench.startupEditor": "$STARTUP_EDITOR",
                        "task.allowAutomaticTasks": "on",
                        "telemetry.telemetryLevel": "off",
                        "update.mode": "none"
                      }
                      EOF

                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/keybindings.json'
                      tee /home/ec2-user/.local/share/code-server/User/keybindings.json << 'EOF'
                      [
                        {
                          "key": "shift+cmd+/",
                          "command": "remote.tunnel.forwardCommandPalette"
                        }
                      ]
                      EOF

                      if [ ! -z "${splashUrl}" ]; then
                      echo "Configuring splash URL..."

                      sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/User/tasks.json'
                      tee /home/ec2-user/.local/share/code-server/User/tasks.json << 'EOF'
                      {
                        "version": "2.0.0",
                        "tasks": [
                          {
                            "label": "Open Splash",
                            "command": "${!input:openSimpleBrowser}",
                            "presentation": {
                              "reveal": "always",
                              "panel": "new"
                            },
                            "runOptions": {
                              "runOn": "folderOpen"
                            }
                          }
                        ],
                        "inputs": [
                          {
                            "id": "openSimpleBrowser",
                            "type": "command",
                            "command": "simpleBrowser.show",
                            "args": [
                              "${splashUrl}"
                            ]
                          }
                        ]
                      }
                      EOF
                      fi

                      echo "Installing code-server extensions..."

                      EXTENSIONS="${extensions}"

                      IFS=',' read -ra array <<< "$EXTENSIONS"

                      # Iterate over each entry in the array
                      for extension in "${!array[@]}"; do
                        # Use retries as extension installation seems unreliable
                        sudo -u ec2-user bash -c "set -e; (r=5;while ! code-server --install-extension $extension --force ; do ((--r))||exit;sleep 5;done)"
                      done

                      if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                        sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                        echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                      fi

                      echo "Restarting code-server..."

                      systemctl restart code-server@ec2-user

                      echo "Installing Caddy..."

                      # Install caddy
                      dnf copr enable -y -q @caddy/caddy epel-9-x86_64
                      dnf install -y -q caddy
                      systemctl enable --now caddy

                      tee /etc/caddy/Caddyfile <<EOF
                      :80 {
                        handle /* {
                          reverse_proxy 127.0.0.1:8889
                        }
                        #GITEA
                      }
                      EOF

                      echo "Restarting caddy..."

                      systemctl restart caddy

                      if [ ! -f "/home/ec2-user/.local/share/code-server/coder.json" ]; then
                        sudo -u ec2-user bash -c 'touch ~/.local/share/code-server/coder.json'
                        echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > /home/ec2-user/.local/share/code-server/coder.json
                      fi

                      ${installGitea}

                      echo "Running custom bootstrap script..."

                      ${customBootstrapScript}
                      HEREDOC

                      exit_code=$?

                      /opt/aws/bin/cfn-signal -e $exit_code '${waitConditionHandleUrl}'

                      exit $exit_code
                    - customBootstrapScript: |
                        date

                        echo '=== Clone Git repository ==='
                        sudo -H -u ec2-user bash -c "git clone https://github.com/fii-practic/code-server-on-aws ~/code-server-on-aws/"

                        echo '=== Setup IDE ==='
                        sudo -H -i -u ec2-user bash -c "~/code-server-on-aws/scripts/ide.sh"
                      codeServerVersion: 4.99.0
                      instanceIamRoleName:
                        Ref: VSCodeIdeEc2Role
                      splashUrl: ""
                      instanceIamRoleArn: !GetAtt VSCodeIdeEc2Role.Arn
                      readmeUrl: ""
                      waitConditionHandleUrl:
                        Ref: VSCodeIdeBootstrapWaitConditionHandle
                      extensions: ms-azuretools.vscode-docker,hashicorp.terraform,vscode-icons-team.vscode-icons,redhat.vscode-yaml

                      domain: ""
                      installGitea: echo bootstrapGitea was not provided
                      terminalOnStartup: "true"
                      environmentContentsZip: ""
                      passwordName:
                        Fn::Join:
                          - "-"
                          - - Fn::Select:
                                - 0
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: VSCodeIdePasswordSecret
                            - Fn::Select:
                                - 1
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: VSCodeIdePasswordSecret
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - "-"
                                    - Fn::Select:
                                        - 6
                                        - Fn::Split:
                                            - ":"
                                            - Ref: VSCodeIdePasswordSecret
            name: IdeBootstrapFunction
            action: aws:runShellScript

  VSCodeIdeBootstrapFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VSCodeIdeBootstrapFunctionServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  VSCodeIdeBootstrapFunctionServiceRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: iam:PassRole
            Effect: Allow
            Resource: !GetAtt VSCodeIdeEc2Role.Arn
          - Action:
              - ec2:DescribeInstances
              - iam:ListInstanceProfiles
              - ssm:DescribeInstanceInformation
              - ssm:SendCommand
              - ssm:GetCommandInvocation
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: VSCodeIdeBootstrapFunctionServiceRoleDefaultPolicy
      Roles:
        - Ref: VSCodeIdeBootstrapFunctionServiceRole

  VSCodeIdeBootstrapFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}-bootstrap-function"
      RetentionInDays: 1
    DeletionPolicy: Delete

  VSCodeIdeBootstrapFunction:
    Type: AWS::Lambda::Function
    DependsOn: VSCodeIdeBootstrapFunctionLogGroup
    Properties:
      FunctionName: !Sub "${AWS::StackName}-bootstrap-function"
      LoggingConfig:
        LogGroup: !Ref VSCodeIdeBootstrapFunctionLogGroup
      Handler: index.lambda_handler
      Role: !GetAtt VSCodeIdeBootstrapFunctionServiceRole.Arn
      Runtime: !Ref LambdaRuntime
      Timeout: 900
      Code:
        ZipFile: |-
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          from botocore.exceptions import WaiterError

          def lambda_handler(event, context):
              print('Event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
              else:
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      ssm = boto3.client('ssm')

                      instance_id = event['ResourceProperties']['InstanceId']

                      print('Waiting for the instance to be ready...')
                      # Wait for Instance to become ready
                      instance_state = 'unknown'
                      print('Instance is currently in state'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          di = ec2.describe_instances(InstanceIds=[instance_id])
                          instance_state = di['Reservations'][0]['Instances'][0]['State']['Name']
                          print('Waiting for instance in state: {}'.format(instance_state))

                      print('Instance is ready')

                      print('Waiting for instance to come online in SSM...')
                      for i in range(1, 60):
                        response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                        if len(response["InstanceInformationList"]) == 0:
                          print('No instances in SSM')
                        elif len(response["InstanceInformationList"]) > 0 and \
                              response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                              response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                          print('Instance is online in SSM')
                          break
                        time.sleep(10)

                      ssm_document = event['ResourceProperties']['SsmDocument']

                      ssm.send_command(
                          InstanceIds=[instance_id],
                          DocumentName=ssm_document,
                          CloudWatchOutputConfig={
                              'CloudWatchLogGroupName': event['ResourceProperties']['LogGroupName'],
                              'CloudWatchOutputEnabled': True
                          })

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}
                  except Exception as e:
                      status = cfnresponse.FAILED
                      tb_err = traceback.format_exc()
                      print(tb_err)
                      responseData = {'Error': tb_err}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

  VSCodeEC2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${AWS::StackName}-code-server"
      RetentionInDays: 1
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  VSCodeIdeBootstrapResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt VSCodeIdeBootstrapFunction.Arn
      LogGroupName:
        Ref: VSCodeEC2LogGroup
      SsmDocument:
        Ref: VSCodeIdeBootstrapDocument
      InstanceId:
        Ref: VSCodeIdeEC2Instance

Outputs:
  IdeUrl:
    Description: Workshop IDE Url
    Value: !Sub https://${VSCodeIdeDistribution.DomainName}
  IdePassword:
    Description: Workshop IDE Password
    Value: !GetAtt VSCodeIdePasswordExporter.password